// Place your key bindings in this file to override the defaults
[
	{
		"key": "ctrl+shift+i",
		"command": "-phind.searchSelection"
	},
	{
		"key": "ctrl+shift+alt+u",
		"command": "-phind.partialAcceptCodeChanges"
	},
	{
		"key": "ctrl+shift+m",
		"command": "-phind.rewriteCode"
	},
	{
		"key": "ctrl+shift+l",
		"command": "-phind.searchTerminalOutput"
	},
	{
		"key": "ctrl+i",
		"command": "-phind.newSearchSelection"
	},
	{
		"key": "ctrl+shift+j",
		"command": "-extension.togglePhindWebview"
	},
	{
		"key": "ctrl+alt+u",
		"command": "-phind.partialRejectCodeChanges"
	},
	{
		"key": "alt+right",
		"command": "-gitlens.key.alt+right",
		"when": "gitlens:key:alt+right"
	},
	{
		"key": "alt+left",
		"command": "-gitlens.key.alt+left",
		"when": "gitlens:key:alt+left"
	},
	{
		"key": "ctrl+shift+i",
		"command": "notebook.formatCell",
		"when": "editorHasDocumentFormattingProvider && editorTextFocus && inCompositeEditor && notebookEditable && !editorReadonly && activeEditor == 'workbench.editor.notebook'"
	},
	{
		"key": "shift+alt+f",
		"command": "-notebook.formatCell",
		"when": "editorHasDocumentFormattingProvider && editorTextFocus && inCompositeEditor && notebookEditable && !editorReadonly && activeEditor == 'workbench.editor.notebook'"
	},
	{
		"key": "ctrl+shift+i",
		"command": "editor.action.formatDocument",
		"when": "editorHasDocumentFormattingProvider && editorTextFocus && !editorReadonly && !inCompositeEditor"
	},
	{
		"key": "shift+alt+f",
		"command": "-editor.action.formatDocument",
		"when": "editorHasDocumentFormattingProvider && editorTextFocus && !editorReadonly && !inCompositeEditor"
	},
	{
		"key": "ctrl+shift+i",
		"command": "editor.action.formatDocument.none",
		"when": "editorTextFocus && !editorHasDocumentFormattingProvider && !editorReadonly"
	},
	{
		"key": "shift+alt+f",
		"command": "-editor.action.formatDocument.none",
		"when": "editorTextFocus && !editorHasDocumentFormattingProvider && !editorReadonly"
	},
	{
		"key": "ctrl+shift+i",
		"command": "notebook.format",
		"when": "notebookEditable && !editorTextFocus && activeEditor == 'workbench.editor.notebook'"
	},
	{
		"key": "shift+alt+f",
		"command": "-notebook.format",
		"when": "notebookEditable && !editorTextFocus && activeEditor == 'workbench.editor.notebook'"
	},
	{
		"key": "ctrl+\\",
		"command": "workbench.action.terminal.split",
		"when": "terminalFocus && terminalProcessSupported || terminalFocus && terminalWebExtensionContributedProfile"
	},
	{
		"key": "ctrl+shift+5",
		"command": "-workbench.action.terminal.split",
		"when": "terminalFocus && terminalProcessSupported || terminalFocus && terminalWebExtensionContributedProfile"
	},
	{
		"key": "ctrl+shift+w",
		"command": "-workbench.action.closeWindow"
	},
	{
		"key": "ctrl+t",
		"command": "workbench.action.terminal.new",
		"when": "terminalProcessSupported || terminalWebExtensionContributedProfile"
	},
	{
		"key": "ctrl+shift+`",
		"command": "-workbench.action.terminal.new",
		"when": "terminalProcessSupported || terminalWebExtensionContributedProfile"
	},
	{
		"key": "ctrl+w",
		"command": "workbench.action.terminal.kill",
		"when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
	},
	{
		"key": "ctrl+shift+t",
		"command": "workbench.action.terminal.openNativeConsole",
		"when": "!terminalFocus"
	},
	{
		"key": "ctrl+shift+c",
		"command": "-workbench.action.terminal.openNativeConsole",
		"when": "!terminalFocus"
	},
	{
		"key": "shift+f3",
		"command": "-workbench.action.terminal.findPrevious",
		"when": "terminalFindFocused && terminalHasBeenCreated || terminalFindFocused && terminalProcessSupported || terminalFocusInAny && terminalHasBeenCreated || terminalFocusInAny && terminalProcessSupported"
	},
	{
		"key": "ctrl+k ctrl+right",
		"command": "-workbench.action.focusRightGroup"
	},
	{
		"key": "ctrl+shift+\\",
		"command": "workbench.action.splitEditorDown"
	},
	{
		"key": "ctrl+k ctrl+\\",
		"command": "-workbench.action.splitEditorDown"
	},
	{
		"key": "ctrl+shift+/",
		"command": "editor.action.addCommentLine",
		"when": "editorTextFocus && !editorReadonly"
	},
	{
		"key": "ctrl+k ctrl+c",
		"command": "-editor.action.addCommentLine",
		"when": "editorTextFocus && !editorReadonly"
	},
	{
		"key": "alt+o",
		"command": "-C_Cpp.SwitchHeaderSource",
		"when": "editorTextFocus && editorLangId =~ /^(c|(cuda-)?cpp)$/ && !(config.C_Cpp.intelliSenseEngine =~ /^[dD]isabled$/)"
	},
	{
		"key": "ctrl+f5",
		"command": "cmake.launchTarget",
		"when": "cmake:enableFullFeatureSet && !cmake:hideDebugCommand && !inDebugMode"
	},
	{
		"key": "shift+f5",
		"command": "-cmake.launchTarget",
		"when": "cmake:enableFullFeatureSet && !cmake:hideDebugCommand && !inDebugMode"
	},
	{
		"key": "f5",
		"command": "cmake.debugTarget",
		"when": "cmake:enableFullFeatureSet && inCMakeProject && !cmake:hideDebugCommand && !inDebugMode"
	},
	{
		"key": "ctrl+f5",
		"command": "-cmake.debugTarget",
		"when": "cmake:enableFullFeatureSet && inCMakeProject && !cmake:hideDebugCommand && !inDebugMode"
	},
	{
		"key": "ctrl+n",
		"command": "welcome.showNewFileEntries"
	},
	{
		"key": "ctrl+alt+meta+n",
		"command": "-welcome.showNewFileEntries"
	},
	{
		"key": "shift+f3",
		"command": "-hediet.vscode-drawio.linkCodeWithSelectedNode",
		"when": "!findWidgetVisible"
	},
	{
		"key": "ctrl+k ctrl+alt+c",
		"command": "-copyFilePath",
		"when": "editorFocus"
	},
	{
		"key": "ctrl+k ctrl+shift+alt+c",
		"command": "-copyRelativeFilePath",
		"when": "editorFocus"
	},
	{
		"key": "alt+h",
		"command": "-git.viewFileHistory"
	},
	{
		"key": "ctrl+c",
		"command": "-gitlens.views.fileHistory.copy",
		"when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.fileHistory/"
	},
	{
		"key": "shift+alt+[IntlBackslash]",
		"command": "-gitlens.diffWithWorking",
		"when": "editorTextFocus && config.gitlens.keymap == 'alternate' && gitlens:activeFileStatus =~ /revision/"
	},
	{
		"key": "shift+alt+.",
		"command": "-gitlens.diffWithWorking",
		"when": "editorTextFocus && config.gitlens.keymap == 'alternate' && gitlens:activeFileStatus =~ /revision/"
	},
	{
		"key": "ctrl+shift+g shift+[IntlBackslash]",
		"command": "-gitlens.diffWithWorking",
		"when": "editorTextFocus && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /revision/"
	},
	{
		"key": "ctrl+shift+g shift+.",
		"command": "-gitlens.diffWithWorking",
		"when": "editorTextFocus && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /revision/"
	},
	{
		"key": "alt+c",
		"command": "-gitlens.showQuickCommitFileDetails",
		"when": "editorTextFocus && !gitlens:disabled && config.gitlens.keymap == 'alternate'"
	},
	{
		"key": "ctrl+shift+g c",
		"command": "-gitlens.showQuickCommitFileDetails",
		"when": "editorTextFocus && !gitlens:disabled && config.gitlens.keymap == 'chorded'"
	},
	{
		"key": "alt+h",
		"command": "-gitlens.showQuickFileHistory",
		"when": "!gitlens:disabled && config.gitlens.keymap == 'alternate'"
	},
	{
		"key": "ctrl+shift+g h",
		"command": "-gitlens.showQuickFileHistory",
		"when": "!gitlens:disabled && config.gitlens.keymap == 'chorded'"
	},
	{
		"key": "alt+b",
		"command": "-gitlens.toggleFileBlame",
		"when": "editorTextFocus && config.gitlens.keymap == 'alternate' && gitlens:activeFileStatus =~ /blameable/"
	},
	{
		"key": "ctrl+shift+g b",
		"command": "-gitlens.toggleFileBlame",
		"when": "editorTextFocus && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /blameable/"
	},
	{
		"key": "ctrl+e",
		"command": "-workbench.action.quickOpen"
	},
	{
		"key": "ctrl+k ctrl+r",
		"command": "-git.revertSelectedRanges",
		"when": "isInDiffEditor && !operationInProgress"
	},
	{
		"key": "ctrl+k ctrl+alt+s",
		"command": "-git.stageSelectedRanges",
		"when": "isInDiffEditor && !operationInProgress"
	},
	{
		"key": "ctrl+k ctrl+n",
		"command": "-git.unstageSelectedRanges",
		"when": "isInDiffEditor && !operationInProgress"
	},
	{
		"key": "ctrl+c",
		"command": "-gitlens.views.branches.copy",
		"when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.branches/"
	},
	{
		"key": "ctrl+c",
		"command": "-gitlens.views.commits.copy",
		"when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.commits/"
	},
	{
		"key": "ctrl+c",
		"command": "-gitlens.views.contributors.copy",
		"when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.contributors/"
	},
	{
		"key": "ctrl+c",
		"command": "-gitlens.views.drafts.copy",
		"when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.drafts/"
	},
	{
		"key": "ctrl+c",
		"command": "-gitlens.views.lineHistory.copy",
		"when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.lineHistory/"
	},
	{
		"key": "ctrl+c",
		"command": "-gitlens.views.pullRequest.copy",
		"when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.pullRequest/"
	},
	{
		"key": "ctrl+c",
		"command": "-gitlens.views.remotes.copy",
		"when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.remotes/"
	},
	{
		"key": "ctrl+c",
		"command": "-gitlens.views.repositories.copy",
		"when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.repositories/"
	},
	{
		"key": "ctrl+c",
		"command": "-gitlens.views.searchAndCompare.copy",
		"when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.searchAndCompare\\b/"
	},
	{
		"key": "ctrl+c",
		"command": "-gitlens.views.stashes.copy",
		"when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.stashes/"
	},
	{
		"key": "ctrl+c",
		"command": "-gitlens.views.tags.copy",
		"when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.tags/"
	},
	{
		"key": "ctrl+c",
		"command": "-gitlens.views.workspaces.copy",
		"when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.workspaces/"
	},
	{
		"key": "ctrl+c",
		"command": "-gitlens.views.worktrees.copy",
		"when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.worktrees/"
	},
	{
		"key": "alt+/",
		"command": "-gitlens.gitCommands",
		"when": "!gitlens:disabled && config.gitlens.keymap == 'alternate'"
	},
	{
		"key": "ctrl+shift+g /",
		"command": "-gitlens.gitCommands",
		"when": "!gitlens:disabled && config.gitlens.keymap == 'chorded'"
	},
	{
		"key": "alt+.",
		"command": "-gitlens.diffWithNext",
		"when": "editorTextFocus && !isInDiffEditor && config.gitlens.keymap == 'alternate' && gitlens:activeFileStatus =~ /revision/"
	},
	{
		"key": "ctrl+shift+g .",
		"command": "-gitlens.diffWithNext",
		"when": "editorTextFocus && !isInDiffEditor && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /revision/"
	},
	{
		"key": "alt+.",
		"command": "-gitlens.diffWithNextInDiffLeft",
		"when": "editorTextFocus && isInDiffEditor && !isInDiffRightEditor && config.gitlens.keymap == 'alternate' && gitlens:activeFileStatus =~ /revision/"
	},
	{
		"key": "ctrl+shift+g .",
		"command": "-gitlens.diffWithNextInDiffLeft",
		"when": "editorTextFocus && isInDiffEditor && !isInDiffRightEditor && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /revision/"
	},
	{
		"key": "alt+.",
		"command": "-gitlens.diffWithNextInDiffRight",
		"when": "editorTextFocus && isInDiffRightEditor && config.gitlens.keymap == 'alternate' && gitlens:activeFileStatus =~ /revision/"
	},
	{
		"key": "ctrl+shift+g .",
		"command": "-gitlens.diffWithNextInDiffRight",
		"when": "editorTextFocus && isInDiffRightEditor && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /revision/"
	},
	{
		"key": "alt+,",
		"command": "-gitlens.diffWithPrevious",
		"when": "editorTextFocus && !isInDiffEditor && config.gitlens.keymap == 'alternate' && gitlens:activeFileStatus =~ /tracked/"
	},
	{
		"key": "ctrl+shift+g ,",
		"command": "-gitlens.diffWithPrevious",
		"when": "editorTextFocus && !isInDiffEditor && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /tracked/"
	},
	{
		"key": "alt+,",
		"command": "-gitlens.diffWithPreviousInDiffLeft",
		"when": "editorTextFocus && isInDiffEditor && !isInDiffRightEditor && config.gitlens.keymap == 'alternate' && gitlens:activeFileStatus =~ /tracked/"
	},
	{
		"key": "ctrl+shift+g ,",
		"command": "-gitlens.diffWithPreviousInDiffLeft",
		"when": "editorTextFocus && isInDiffEditor && !isInDiffRightEditor && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /tracked/"
	},
	{
		"key": "alt+,",
		"command": "-gitlens.diffWithPreviousInDiffRight",
		"when": "editorTextFocus && isInDiffRightEditor && config.gitlens.keymap == 'alternate' && gitlens:activeFileStatus =~ /tracked/"
	},
	{
		"key": "ctrl+shift+g ,",
		"command": "-gitlens.diffWithPreviousInDiffRight",
		"when": "editorTextFocus && isInDiffRightEditor && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /tracked/"
	},
	{
		"key": "alt+[IntlBackslash]",
		"command": "-gitlens.diffLineWithPrevious",
		"when": "editorTextFocus && config.gitlens.keymap == 'alternate' && gitlens:activeFileStatus =~ /tracked/"
	},
	{
		"key": "shift+alt+,",
		"command": "-gitlens.diffLineWithPrevious",
		"when": "editorTextFocus && config.gitlens.keymap == 'alternate' && gitlens:activeFileStatus =~ /tracked/"
	},
	{
		"key": "ctrl+shift+g [IntlBackslash]",
		"command": "-gitlens.diffLineWithPrevious",
		"when": "editorTextFocus && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /tracked/"
	},
	{
		"key": "ctrl+shift+g shift+,",
		"command": "-gitlens.diffLineWithPrevious",
		"when": "editorTextFocus && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /tracked/"
	},
	{
		"key": "shift+alt+h",
		"command": "-gitlens.showQuickRepoHistory",
		"when": "!gitlens:disabled && config.gitlens.keymap == 'alternate'"
	},
	{
		"key": "ctrl+shift+g shift+h",
		"command": "-gitlens.showQuickRepoHistory",
		"when": "!gitlens:disabled && config.gitlens.keymap == 'chorded'"
	},
	{
		"key": "alt+s",
		"command": "-gitlens.showQuickRepoStatus",
		"when": "!gitlens:disabled && config.gitlens.keymap == 'alternate'"
	},
	{
		"key": "ctrl+shift+g s",
		"command": "-gitlens.showQuickRepoStatus",
		"when": "!gitlens:disabled && config.gitlens.keymap == 'chorded'"
	},
	{
		"key": "shift+alt+b",
		"command": "-gitlens.toggleCodeLens",
		"when": "editorTextFocus && !gitlens:disabled && !gitlens:disabledToggleCodeLens && config.gitlens.keymap == 'alternate'"
	},
	{
		"key": "ctrl+shift+g shift+b",
		"command": "-gitlens.toggleCodeLens",
		"when": "editorTextFocus && !gitlens:disabled && !gitlens:disabledToggleCodeLens && config.gitlens.keymap == 'chorded'"
	},
	{
		"key": "ctrl+shift+v",
		"command": "-markdown.extension.closePreview",
		"when": "activeWebviewPanelId == 'markdown.preview'"
	},
	{
		"key": "ctrl+k v",
		"command": "-markdown.extension.closePreview",
		"when": "activeWebviewPanelId == 'markdown.preview'"
	},
	{
		"key": "ctrl+v",
		"command": "-markdown.extension.editing.paste",
		"when": "editorHasSelection && editorTextFocus && editorLangId =~ /^markdown$|^rmd$|^quarto$/"
	},
	{
		"key": "ctrl+shift+[",
		"command": "-markdown.extension.editing.toggleHeadingDown",
		"when": "editorTextFocus && !editorReadonly && editorLangId =~ /^markdown$|^rmd$|^quarto$/"
	},
	{
		"key": "ctrl+shift+]",
		"command": "-markdown.extension.editing.toggleHeadingUp",
		"when": "editorTextFocus && !editorReadonly && editorLangId =~ /^markdown$|^rmd$|^quarto$/"
	},
	{
		"key": "backspace",
		"command": "-markdown.extension.onBackspaceKey",
		"when": "editorTextFocus && !editorHasMultipleSelections && !editorReadonly && !markdown.extension.editor.cursor.inFencedCodeBlock && !markdown.extension.editor.cursor.inMathEnv && !suggestWidgetVisible && vim.mode != 'CommandlineInProgress' && vim.mode != 'EasyMotionInputMode' && vim.mode != 'EasyMotionMode' && vim.mode != 'Normal' && vim.mode != 'Replace' && vim.mode != 'SearchInProgressMode' && vim.mode != 'SurroundInputMode' && vim.mode != 'Visual' && vim.mode != 'VisualBlock' && vim.mode != 'VisualLine' && editorLangId =~ /^markdown$|^rmd$|^quarto$/"
	},
	{
		"key": "ctrl+shift+alt+down",
		"command": "-markdown.extension.onCopyLineDown",
		"when": "editorTextFocus && !editorReadonly && !suggestWidgetVisible && editorLangId =~ /^markdown$|^rmd$|^quarto$/"
	},
	{
		"key": "ctrl+shift+alt+up",
		"command": "-markdown.extension.onCopyLineUp",
		"when": "editorTextFocus && !editorReadonly && !suggestWidgetVisible && editorLangId =~ /^markdown$|^rmd$|^quarto$/"
	},
	{
		"key": "ctrl+enter",
		"command": "-markdown.extension.onCtrlEnterKey",
		"when": "editorTextFocus && !editorHasMultipleSelections && !editorReadonly && !markdown.extension.editor.cursor.inFencedCodeBlock && !markdown.extension.editor.cursor.inMathEnv && !suggestWidgetVisible && editorLangId =~ /^markdown$|^rmd$|^quarto$/ || editorTextFocus && !editorHasMultipleSelections && !editorReadonly && !markdown.extension.editor.cursor.inFencedCodeBlock && !markdown.extension.editor.cursor.inMathEnv && config.editor.acceptSuggestionOnEnter == 'off' && editorLangId =~ /^markdown$|^rmd$|^quarto$/"
	},
	{
		"key": "enter",
		"command": "-markdown.extension.onEnterKey",
		"when": "editorTextFocus && !editorHasMultipleSelections && !editorReadonly && !markdown.extension.editor.cursor.inFencedCodeBlock && !markdown.extension.editor.cursor.inMathEnv && !suggestWidgetVisible && vim.mode != 'CommandlineInProgress' && vim.mode != 'EasyMotionInputMode' && vim.mode != 'EasyMotionMode' && vim.mode != 'Normal' && vim.mode != 'Replace' && vim.mode != 'SearchInProgressMode' && vim.mode != 'SurroundInputMode' && vim.mode != 'Visual' && vim.mode != 'VisualBlock' && vim.mode != 'VisualLine' && editorLangId =~ /^markdown$|^rmd$|^quarto$/ || editorTextFocus && !editorHasMultipleSelections && !editorReadonly && !markdown.extension.editor.cursor.inFencedCodeBlock && !markdown.extension.editor.cursor.inMathEnv && config.editor.acceptSuggestionOnEnter == 'off' && vim.mode != 'CommandlineInProgress' && vim.mode != 'EasyMotionInputMode' && vim.mode != 'EasyMotionMode' && vim.mode != 'Normal' && vim.mode != 'Replace' && vim.mode != 'SearchInProgressMode' && vim.mode != 'SurroundInputMode' && vim.mode != 'Visual' && vim.mode != 'VisualBlock' && vim.mode != 'VisualLine' && editorLangId =~ /^markdown$|^rmd$|^quarto$/"
	},
	{
		"key": "ctrl+]",
		"command": "-markdown.extension.onIndentLines",
		"when": "editorTextFocus && !suggestWidgetVisible && editorLangId =~ /^markdown$|^rmd$|^quarto$/"
	},
	{
		"key": "alt+down",
		"command": "-markdown.extension.onMoveLineDown",
		"when": "editorTextFocus && !editorReadonly && !suggestWidgetVisible && editorLangId =~ /^markdown$|^rmd$|^quarto$/"
	},
	{
		"key": "alt+up",
		"command": "-markdown.extension.onMoveLineUp",
		"when": "editorTextFocus && !editorReadonly && !suggestWidgetVisible && editorLangId =~ /^markdown$|^rmd$|^quarto$/"
	},
	{
		"key": "ctrl+[",
		"command": "-markdown.extension.onOutdentLines",
		"when": "editorTextFocus && !suggestWidgetVisible && editorLangId =~ /^markdown$|^rmd$|^quarto$/"
	},
	{
		"key": "shift+enter",
		"command": "-markdown.extension.onShiftEnterKey",
		"when": "editorTextFocus && !editorHasMultipleSelections && !editorReadonly && !markdown.extension.editor.cursor.inFencedCodeBlock && !markdown.extension.editor.cursor.inMathEnv && !suggestWidgetVisible && editorLangId =~ /^markdown$|^rmd$|^quarto$/ || editorTextFocus && !editorHasMultipleSelections && !editorReadonly && !markdown.extension.editor.cursor.inFencedCodeBlock && !markdown.extension.editor.cursor.inMathEnv && config.editor.acceptSuggestionOnEnter == 'off' && editorLangId =~ /^markdown$|^rmd$|^quarto$/"
	},
	{
		"key": "shift+tab",
		"command": "-markdown.extension.onShiftTabKey",
		"when": "editorTextFocus && markdown.extension.editor.cursor.inList && !editorHasMultipleSelections && !editorReadonly && !editorTabMovesFocus && !hasOtherSuggestions && !hasSnippetCompletions && !inSnippetMode && !markdown.extension.editor.cursor.inFencedCodeBlock && !markdown.extension.editor.cursor.inMathEnv && !suggestWidgetVisible && editorLangId =~ /^markdown$|^rmd$|^quarto$/"
	},
	{
		"key": "tab",
		"command": "-markdown.extension.onTabKey",
		"when": "editorTextFocus && markdown.extension.editor.cursor.inList && !editorHasMultipleSelections && !editorReadonly && !editorTabMovesFocus && !hasOtherSuggestions && !hasSnippetCompletions && !inSnippetMode && !inlineSuggestionVisible && !markdown.extension.editor.cursor.inFencedCodeBlock && !markdown.extension.editor.cursor.inMathEnv && !suggestWidgetVisible && editorLangId =~ /^markdown$|^rmd$|^quarto$/"
	},
	{
		"key": "alt+,",
		"command": "-gitlens.key.alt+,",
		"when": "gitlens:key:,"
	},
	{
		"key": "alt+.",
		"command": "-gitlens.key.alt+.",
		"when": "gitlens:key:."
	},
	{
		"key": "alt+enter",
		"command": "-gitlens.key.alt+enter",
		"when": "gitlens:key:alt+enter"
	},
	{
		"key": "ctrl+enter",
		"command": "-gitlens.key.ctrl+enter",
		"when": "gitlens:key:ctrl+enter"
	},
	{
		"key": "ctrl+left",
		"command": "-gitlens.key.ctrl+left",
		"when": "gitlens:key:ctrl+left"
	},
	{
		"key": "ctrl+right",
		"command": "-gitlens.key.ctrl+right",
		"when": "gitlens:key:ctrl+right"
	},
	{
		"key": "escape",
		"command": "-gitlens.key.escape",
		"when": "editorTextFocus && gitlens:key:escape && !codeActionMenuVisible && !findWidgetVisible && !isInEmbeddedEditor && !parameterHintsVisible && !quickFixWidgetVisible && !referenceSearchVisible && !renameInputVisible && !suggestWidgetVisible"
	},
	{
		"key": "left",
		"command": "-gitlens.key.left",
		"when": "gitlens:key:left"
	},
	{
		"key": "right",
		"command": "-gitlens.key.right",
		"when": "gitlens:key:right"
	},
	{
		"key": "ctrl+shift+r ctrl+i",
		"command": "-editor.action.codeAction",
		"when": "editorTextFocus && editorLangId =~ /^(c|(cuda-)?cpp)$/ && !(config.C_Cpp.intelliSenseEngine =~ /^[dD]isabled$/)"
	},
	{
		"key": "ctrl+shift+r ctrl+e",
		"command": "-editor.action.codeAction",
		"when": "editorTextFocus && editorLangId =~ /^(c|(cuda-)?cpp)$/ && !(config.C_Cpp.intelliSenseEngine =~ /^[dD]isabled$/)"
	},
	{
		"key": "ctrl+shift+g g",
		"command": "-workbench.view.scm",
		"when": "workbench.scm.active && !gitlens:disabled && config.gitlens.keymap == 'chorded'"
	},
	{
		"key": "ctrl+shift+,",
		"command": "workbench.action.openGlobalKeybindings"
	},
	{
		"key": "ctrl+k ctrl+s",
		"command": "-workbench.action.openGlobalKeybindings"
	},
	{
		"key": "ctrl+shift+o",
		"command": "-workbench.action.terminal.openDetectedLink",
		"when": "terminalFocus && terminalHasBeenCreated"
	},
	{
		"key": "ctrl+shift+o",
		"command": "-editor.action.accessibleViewGoToSymbol",
		"when": "accessibilityHelpIsShown && accessibleViewGoToSymbolSupported || accessibleViewGoToSymbolSupported && accessibleViewIsShown"
	},
	{
		"key": "ctrl+shift+o",
		"command": "workbench.action.files.openFolder",
		"when": "openFolderWorkspaceSupport"
	},
	{
		"key": "ctrl+k ctrl+o",
		"command": "-workbench.action.files.openFolder",
		"when": "openFolderWorkspaceSupport"
	},
	{
		"key": "ctrl+pagedown",
		"command": "workbench.action.nextEditor"
	},
	{
		"key": "ctrl+pagedown",
		"command": "-workbench.action.nextEditor"
	},
	{
		"key": "ctrl+pageup",
		"command": "workbench.action.previousEditor"
	},
	{
		"key": "ctrl+pageup",
		"command": "-workbench.action.previousEditor"
	},
	{
		"key": "alt+right",
		"command": "workbench.action.focusNextGroup"
	},
	{
		"key": "alt+left",
		"command": "workbench.action.focusPreviousGroup"
	},
	{
		"key": "alt+right",
		"command": "workbench.action.terminal.focusNextPane",
		"when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
	},
	{
		"key": "alt+down",
		"command": "-workbench.action.terminal.focusNextPane",
		"when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
	},
	{
		"key": "alt+left",
		"command": "workbench.action.terminal.focusPreviousPane",
		"when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
	},
	{
		"key": "alt+up",
		"command": "-workbench.action.terminal.focusPreviousPane",
		"when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
	},
	{
		"key": "ctrl+pagedown",
		"command": "workbench.action.terminal.focusNext",
		"when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
	},
	{
		"key": "ctrl+pagedown",
		"command": "-workbench.action.terminal.focusNext",
		"when": "terminalFocus && terminalHasBeenCreated && !terminalEditorFocus || terminalFocus && terminalProcessSupported && !terminalEditorFocus"
	},
	{
		"key": "ctrl+pageup",
		"command": "workbench.action.terminal.focusPrevious",
		"when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
	},
	{
		"key": "ctrl+pageup",
		"command": "-workbench.action.terminal.focusPrevious",
		"when": "terminalFocus && terminalHasBeenCreated && !terminalEditorFocus || terminalFocus && terminalProcessSupported && !terminalEditorFocus"
	}
]